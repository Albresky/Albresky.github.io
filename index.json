[{"categories":["系统"],"content":"快速水一篇~~如何从Windows 11回滚到Windows 10 ","date":"2021-10-08","objectID":"/win11/:0:0","tags":["Windows 11"],"title":"从Windows 11回到Windows 10","uri":"/win11/"},{"categories":["系统"],"content":"前言 以下基本是废话，直接跳到最后一句即可（这种操作小学就会了） 好吧，本篇文章很水，*全是废话 Win 11回滚至Win 10\r\r","date":"2021-10-08","objectID":"/win11/:0:1","tags":["Windows 11"],"title":"从Windows 11回到Windows 10","uri":"/win11/"},{"categories":["系统"],"content":"1 什么是Windows 11 Windows 11就是大版本迭代更新都修复不了重启电脑Desktop图标错位以及系统时间异常的垃圾系统，不得不说Ubuntu是真真真好用，稳定是关键！ ","date":"2021-10-08","objectID":"/win11/:1:0","tags":["Windows 11"],"title":"从Windows 11回到Windows 10","uri":"/win11/"},{"categories":["系统"],"content":"2 为什么要回退 这还需要问吗？微软什么时候不是小更新小bug，大更新系统级BUG呢？ 当前系统版本信息： 系统版本信息当前Win11系统版本信息 \"\r系统版本信息\r\r看到了吧，“**WIndows 11专业工作站版**”！！！。。。。\r工作站版bug也如此低级，所以你知道什么是微软Windows了吧。\r- 再看：\r右击菜单右击菜单 \"\r右击菜单\r\r作为一个天天都要右击的男孩，怎么能忍受如此shabby！！的右击菜单，没有了程序猿常用的一键vscode，一键git bash，一键刷新！！\r一下才是必备右击菜单，你说是不是！！\r右击菜单old右击菜单old \"\r右击菜单old\r\r","date":"2021-10-08","objectID":"/win11/:2:0","tags":["Windows 11"],"title":"从Windows 11回到Windows 10","uri":"/win11/"},{"categories":["系统"],"content":"3 如何回退 妈的我废话太多了，直接上图： 回滚回滚 \"\r回滚\r\r点击“**返回**”即可\r\r\r　","date":"2021-10-08","objectID":"/win11/:3:0","tags":["Windows 11"],"title":"从Windows 11回到Windows 10","uri":"/win11/"},{"categories":["电影"],"content":"Demo - 黑客帝国4：矩阵重生 预告","date":"2021-10-05","objectID":"/the-matrix-resurrections/","tags":[],"title":"黑客帝国4：矩阵重生","uri":"/the-matrix-resurrections/"},{"categories":["电影"],"content":"Demo - 黑客帝国4：矩阵重生 预告 黑客帝国简介 黑客帝国\r\r","date":"2021-10-05","objectID":"/the-matrix-resurrections/:0:0","tags":[],"title":"黑客帝国4：矩阵重生","uri":"/the-matrix-resurrections/"},{"categories":["电影"],"content":"黑客帝国 The Matrix (1999) 黑客帝国 The Matrix黑客帝国 The Matrix \"\r黑客帝国 The Matrix\r\r`不久的将来，网络黑客尼奥（基奴李维斯 饰）对这个看似正常的现实世界产生了怀疑。他结识了黑客崔妮蒂（凯莉·安·摩丝 饰），并见到了黑客组织的首领墨菲斯（劳伦斯·菲什伯恩 饰）。墨菲斯告诉他，现实世界其实是由一个名叫“母体”的计算机人工智能系统控制，人们就像他们饲养的动物，没有自由和思想，而尼奥就是能够拯救人类的救世主。`\r可是，救赎之路从来都不会一帆风顺，到底哪里才是真实的世界？如何才能打败那些超人一样的特勤？尼奥是不是人类的希望？这是黑客的帝国，程序和代码欢迎大家的到来。 ©豆瓣\r\r\r　黑客帝国2\r\r","date":"2021-10-05","objectID":"/the-matrix-resurrections/:1:0","tags":[],"title":"黑客帝国4：矩阵重生","uri":"/the-matrix-resurrections/"},{"categories":["电影"],"content":"黑客帝国2：重装上阵 The Matrix Reloaded (2003) 黑客帝国2：重装上阵 The Matrix Reloaded\"\r黑客帝国2：重装上阵 The Matrix Reloaded\r\r上一部结尾，尼奥（基奴李维斯 饰）终于意识到自己的能力和使命，中弹复活后，变成了无所不能的“救世主”，他和女友崔妮蒂（凯莉·安·摩丝 饰），舰长墨菲斯（劳伦斯·菲什伯恩 饰）回到了人类的基地锡安，受到人们的热烈欢迎。\r此时，“母体”决定先下手为强，派出了两万五千只电子乌贼攻击锡安基地；墨菲斯、尼奥和崔妮蒂则再次进入“母体”，寻找“制钥者”，准备从内部破坏；而本该被尼奥消灭的特勤史密斯似乎出了点问题，脱离了“母体”的控制，拥有可怕的复制能力，阻碍尼奥他们的行动。 ©豆瓣\r\r\r　黑客帝国3\r\r　","date":"2021-10-05","objectID":"/the-matrix-resurrections/:2:0","tags":[],"title":"黑客帝国4：矩阵重生","uri":"/the-matrix-resurrections/"},{"categories":["电影"],"content":"黑客帝国3：矩阵革命 The Matrix Revolutions (2003) 黑客帝国3：矩阵革命 The Matrix Revolutions\"\r黑客帝国3：矩阵革命 The Matrix Revolutions\r\r第二集中，尼奥（基努·里维斯 Keanu Reeves 饰）没有能从内部摧毁“母体”，他的身体在真实世界的飞船上陷于昏迷，思想却被困在介于“母体”和真实世界的中间地带，这个地方由“火车人”控制。墨菲斯（劳伦斯·菲什伯恩 Laurence Fishburne 饰）和崔妮蒂（凯瑞-安·莫斯 Carrie-Anne Moss 饰）等人知道了尼奥的情况，在守护天使的带领下， 找到了“火车人”的控制者梅罗纹奇，经过一番激斗，将尼奥救了出来。\r此时，电子乌贼部队对锡安发起了猛烈的攻击，人类组织所有机甲战士展开顽强的抵抗，形势危在旦夕；尼奥和崔妮蒂驾驶了一艘飞船克服重重困难，到达机器城市，尼奥终于见到了机器世界的统治者“机器大帝”，双方谈判并达成了协议：尼奥除掉不受“母体”控制的史密斯，以换取锡安的和平。\r在“母体”中，尼奥和史密斯展开了关系人类生死存亡的最后决斗。 ©豆瓣　\r\r　黑客帝国4：矩阵重生 ","date":"2021-10-05","objectID":"/the-matrix-resurrections/:3:0","tags":[],"title":"黑客帝国4：矩阵重生","uri":"/the-matrix-resurrections/"},{"categories":["电影"],"content":"简介 信息\r\r黑客帝国4：矩阵重启的剧情简介 · · · · · · 影片承接《黑客帝国3：矩阵革命》的故事，尼奥（基努·里维斯 Keanu Reeves 饰）和崔妮蒂（凯瑞-安·莫斯 Carrie-Anne Moss 饰）联手归来，继续与AI世界的机械大军展开对抗。\r\r　","date":"2021-10-05","objectID":"/the-matrix-resurrections/:4:0","tags":[],"title":"黑客帝国4：矩阵重生","uri":"/the-matrix-resurrections/"},{"categories":["电影"],"content":"预告片 \r","date":"2021-10-05","objectID":"/the-matrix-resurrections/:5:0","tags":[],"title":"黑客帝国4：矩阵重生","uri":"/the-matrix-resurrections/"},{"categories":["电影"],"content":"演员 基努·里维斯 Keanu Reeves 几张帅照： 基努·里维斯 Keanu Reeves基努·里维斯 Keanu Reeves \"\r基努·里维斯 Keanu Reeves\r 基努·里维斯 Keanu Reeves基努·里维斯 Keanu Reeves \"\r基努·里维斯 Keanu Reeves\r ","date":"2021-10-05","objectID":"/the-matrix-resurrections/:6:0","tags":[],"title":"黑客帝国4：矩阵重生","uri":"/the-matrix-resurrections/"},{"categories":["Web-Maintain"],"content":"imisu | 功能预览 Function Preview ","date":"2021-10-04","objectID":"/fuction-preview/:0:0","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"1 Style 自定义样式 注意\r\rHugo extended 版本对于 style shortcode 是必需的.\r\r style shortcode 用来在你的文章中插入自定义样式. style shortcode 有两个位置参数. 第一个参数是自定义样式的内容. 它支持  SASS 中的嵌套语法, 并且 \u0026 指代这个父元素. 第二个参数是包裹你要更改样式的内容的 HTML 标签, 默认值是 div. 此处github检测有问题 一个 style 示例: 呈现的输出效果如下: 此处github检测有问题 ","date":"2021-10-04","objectID":"/fuction-preview/:1:0","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"2 link 链接 link shortcode 是 Markdown 链接语法 的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{\u003c link \"https://assemble.io\" \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} 或者 {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} 或者 {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage ","date":"2021-10-04","objectID":"/fuction-preview/:2:0","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"3 image 图片 image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持本地资源引用的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{\u003c image src=\"lighthouse.jpg\" caption=\"Lighthouse (`image`)\" src_s=\"lighthouse-small.jpg\" src_l=\"lighthouse-large.jpg\" \u003e}} 呈现的输出效果如下: Lighthouse (image)Lighthouse \"\rLighthouse (image)\r ","date":"2021-10-04","objectID":"/fuction-preview/:3:0","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"4 admonition 横幅 admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r\r一个 注意 横幅\r\r 摘要\r\r一个 摘要 横幅\r\r 信息\r\r一个 信息 横幅\r\r 技巧\r\r一个 技巧 横幅\r\r 成功\r\r一个 成功 横幅\r\r 问题\r\r一个 问题 横幅\r\r 警告\r\r一个 警告 横幅\r\r 失败\r\r一个 失败 横幅\r\r 危险\r\r一个 危险 横幅\r\r Bug\r\r一个 Bug 横幅\r\r 示例\r\r一个 示例 横幅\r\r 引用\r\r一个 引用 横幅\r\r admonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 横幅内容是否默认展开, 默认值是 true. 一个 admonition 示例: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 呈现的输出效果如下: This is a tip\r\r一个 技巧 横幅\r\r ","date":"2021-10-04","objectID":"/fuction-preview/:4:0","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"5 mermaid mermaid 是一个可以帮助你在文章中生成图表和流程图的库, 类似 Markdown 的语法. 只需将你的 mermaid 代码插入 mermaid shortcode 中即可. ","date":"2021-10-04","objectID":"/fuction-preview/:5:0","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"5.1 流程图 一个 流程图 mermaid 示例: {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2021-10-04","objectID":"/fuction-preview/:5:1","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"5.2 时序图 一个 时序图 mermaid 示例: {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2021-10-04","objectID":"/fuction-preview/:5:2","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"5.3 甘特图 一个 甘特图 mermaid 示例: {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2021-10-04","objectID":"/fuction-preview/:5:3","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"5.5 状态图 一个 状态图 mermaid 示例: {{\u003c mermaid \u003e}} stateDiagram [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2021-10-04","objectID":"/fuction-preview/:5:4","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"5.6 Git 图 一个 Git 图 mermaid 示例: {{\u003c mermaid \u003e}} gitGraph: options { \"nodeSpacing\": 100, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2021-10-04","objectID":"/fuction-preview/:5:5","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"5.7 实体关系图 一个 erDiagram mermaid 示例: {{\u003c mermaid \u003e}} erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2021-10-04","objectID":"/fuction-preview/:5:6","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"5.8 用户旅程图 一个 旅行 mermaid 示例: {{\u003c mermaid \u003e}} journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2021-10-04","objectID":"/fuction-preview/:5:7","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"5.9 饼图 一个 饼图 mermaid 示例: {{\u003c mermaid \u003e}} pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2021-10-04","objectID":"/fuction-preview/:5:8","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"6 mapbox 地图 Mapbox GL JS 是一个 JavaScript 库，它使用 WebGL, 以 vector tiles 和 Mapbox styles 为来源, 将它们渲染成互动式地图. mapbox shortcode 有以下命名参数来使用 Mapbox GL JS: lng [必需] (第一个位置参数) 地图初始中心点的经度, 以度为单位. lat [必需] (第二个位置参数) 地图初始中心点的纬度, 以度为单位. zoom [可选] (第三个位置参数) 地图的初始缩放级别, 默认值是 10. marked [可选] (第四个位置参数) 是否在地图的初始中心点添加图钉, 默认值是 true. light-style [可选] (第五个位置参数) 浅色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. dark-style [可选] (第六个位置参数) 深色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. navigation [可选] 是否添加 NavigationControl, 默认值是前置参数或者网站配置中设置的值. geolocate [可选] 是否添加 GeolocateControl, 默认值是前置参数或者网站配置中设置的值. scale [可选] 是否添加 ScaleControl, 默认值是前置参数或者网站配置中设置的值. fullscreen [可选] 是否添加 FullscreenControl, 默认值是前置参数或者网站配置中设置的值. width [可选] 地图的宽度, 默认值是 100%. height [可选] 地图的高度, 默认值是 20rem. 一个简单的 mapbox 示例: {{\u003c mapbox 120.345228 30.316572 12 \u003e}} 或者 {{\u003c mapbox lng=120.345228 lat=30.316572 zoom=12 \u003e}} 呈现的输出效果如下: 一个带有自定义样式的 mapbox 示例: {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 或者 {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 呈现的输出效果如下: ","date":"2021-10-04","objectID":"/fuction-preview/:6:0","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"7 music 音乐 music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. ","date":"2021-10-04","objectID":"/fuction-preview/:7:0","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"7.1 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{\u003c music url=\"music.mp3\" name=你离开了南京从此没有人和我说话 artist=窑子 cover=\"music_cover.jpg\" \u003e}} 呈现的输出效果如下: ","date":"2021-10-04","objectID":"/fuction-preview/:7:1","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"7.2 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{\u003c music auto=\"https://music.163.com/#/playlist?id=639748708\" \u003e}} 或者 {{\u003c music \"https://music.163.com/#/playlist?id=639748708\" \u003e}} 呈现的输出效果如下: ","date":"2021-10-04","objectID":"/fuction-preview/:7:2","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"7.3 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{\u003c music server=\"netease\" type=\"song\" id=\"1821466030\" \u003e}} 或者 {{\u003c music netease song 1821466030 \u003e}} 呈现的输出效果如下: ","date":"2021-10-04","objectID":"/fuction-preview/:7:3","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"7.4 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. ","date":"2021-10-04","objectID":"/fuction-preview/:7:4","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"8 video 视频 ","date":"2021-10-04","objectID":"/fuction-preview/:8:0","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"8.1 bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV id, 例如: https://www.bilibili.com/video/BV1ZX4y1V7Qb 一个 bilibili 示例: {{\u003c bilibili BV1ZX4y1V7Qb \u003e}} 或者 {{\u003c bilibili id=BV1ZX4y1V7Qb \u003e}} 呈现的输出效果如下: \r如果视频包含多个部分, 则除了视频的 BV id 之外, 还需要 p, 默认值为 1, 例如: https://www.bilibili.com/video/BV17f4y1G7JU?p=1 一个带有 p 参数的 bilibili 示例: {{\u003c bilibili BV17f4y1G7JU 1 \u003e}} 或者 {{\u003c bilibili id=BV17f4y1G7JU p=1 \u003e}} 呈现的输出效果如下: \r警告\r\r以下内容可用需要 VPN 才能预览\r\r ","date":"2021-10-04","objectID":"/fuction-preview/:8:1","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"8.2 vimeo vimeo 的文档 一个 vimeo 示例: {{\u003c vimeo 146022717 \u003e}} 呈现的输出效果如下: 警告\r\r以下内容可用需要 VPN 才能预览\r\r ","date":"2021-10-04","objectID":"/fuction-preview/:8:2","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"8.3 YouTube YouTube 的文档 一个 YouTube 示例: {{\u003c youtube w7Ft2ymGmfc \u003e}} 呈现的输出效果如下: ","date":"2021-10-04","objectID":"/fuction-preview/:8:3","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"9 Markdown 扩展语法 ","date":"2021-10-04","objectID":"/fuction-preview/:9:0","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"9.1 Emoji 支持 这部分内容在 Emoji 支持页面 中介绍. ","date":"2021-10-04","objectID":"/fuction-preview/:9:1","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"9.2 数学公式 基于 $ \\KaTeX $ 提供数学公式的支持. 在你的 网站配置 中的 [params.math] 下面设置属性 enable = true, 并在文章的前置参数中设置属性 math: true来启用数学公式的自动渲染. 技巧\r\r有一份 $ \\KaTeX $ 中支持的 $ \\TeX $ 函数 清单.\r\r 9.2.1 公式块 默认的公式块分割符是 $$/$$ 和 \\\\[/\\\\]: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\\\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\] 呈现的输出效果如下: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] 9.2.2 行内公式 默认的行内公式分割符是 $/$ 和 \\\\(/\\\\): $ c = \\pm\\sqrt{a^2 + b^2} $ 和 \\\\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\) 呈现的输出效果如下: $ c = \\pm\\sqrt{a^2 + b^2} $ 和 \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) 技巧\r\r可以在confit.toml中自定义公式块和行内公式的分割符.\r\r 9.2.3 Copy-tex Copy-tex 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 在选择并复制 $ \\KaTeX $ 渲染的公式时, 会将其 $ \\LaTeX $ 源代码复制到剪贴板. 在confit.toml中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 LaTeX 源代码. 9.2.4 mhchem mhchem 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ 呈现的输出效果如下: $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ ","date":"2021-10-04","objectID":"/fuction-preview/:9:2","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"9.3 字符注音或者注释 [Hugo]^(一个开源的静态网站生成工具) 呈现的输出效果如下: Hugo一个开源的静态网站生成工具 ","date":"2021-10-04","objectID":"/fuction-preview/:9:3","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"9.4 分数 [浅色]/[深色] [99]/[100] 呈现的输出效果如下: 浅色/深色 90/100 ","date":"2021-10-04","objectID":"/fuction-preview/:9:4","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"Font Awesome 使用 Font Awesome 作为图标库. 你同样可以在文章中轻松使用这些图标. 从 Font Awesome 网站 上获取所需的图标 class. 去露营啦! :(fas fa-campground fa-fw): 很快就回来. 真开心! :(far fa-grin-tears): 呈现的输出效果如下: 去露营啦!  很快就回来. 真开心! ","date":"2021-10-04","objectID":"/fuction-preview/:9:5","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"转义字符 在某些特殊情况下 (编写这个主题文档时 ), 你的文章内容会与 Markdown 的基本或者扩展语法冲突, 并且无法避免. 转义字符语法可以帮助你渲染出想要的内容: 此处没有通过github语法检测 例如, 两个 : 会启用 emoji 语法. 但有时候这不是你想要的结果. 可以像这样使用转义字符语法: 此处没有通过github语法检测 呈现的输出效果如下: :joy: 而不是 😂 技巧\r\r这个方法可以间接解决一个还未解决的 Hugo 的 issue.\r\r 另一个例子是: 此处没有通过github语法检测 呈现的输出效果如下: [link](#escape-character) 而不是 link. ","date":"2021-10-04","objectID":"/fuction-preview/:9:6","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"10 typeit 打字动画 typeit shortcode 基于 TypeIt 提供了打字动画. 只需将你需要打字动画的内容插入 typeit shortcode 中即可. ","date":"2021-10-04","objectID":"/fuction-preview/:10:0","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"10.1 简单内容 允许使用 Markdown 格式的简单内容, 并且 不包含 富文本的块内容, 例如图像等等… 一个 typeit 示例: {{\u003c typeit \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r另外, 你也可以自定义 HTML 标签. 一个带有 h4 标签的 typeit 示例: {{\u003c typeit tag=h4 \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r","date":"2021-10-04","objectID":"/fuction-preview/:10:1","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"10.2 代码内容 代码内容也是允许的, 并且通过使用参数 code 指定语言类型可以实习语法高亮. 一个带有 code 参数的 typeit 示例: {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r","date":"2021-10-04","objectID":"/fuction-preview/:10:2","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"10.3 分组内容 默认情况下, 所有打字动画都是同时开始的. 但是有时你可能需要按顺序开始一组 typeit 内容的打字动画. 一组具有相同 group 参数值的 typeit 内容将按顺序开始打字动画. 一个带有 group 参数的 typeit 示例: {{\u003c typeit group=paragraph \u003e}} **首先**, 这个段落开始 {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **然后**, 这个段落开始 {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r\r","date":"2021-10-04","objectID":"/fuction-preview/:10:3","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"11 script JS脚本 script shortcode 用来在你的文章中插入  Javascript 脚本. 注意\r\r脚本内容可以保证在所有的第三方库加载之后按顺序执行. 所以你可以自由地使用第三方库.\r\r 一个 script 示例: {{\u003c script \u003e}} console.log('Hello imisu!'); {{\u003c /script \u003e}} 你可以在开发者工具的控制台中看到输出. ","date":"2021-10-04","objectID":"/fuction-preview/:11:0","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"12 oEmbed oEmbed endpoints allow you to get embed HTML and basic metadata for pages, posts, and videos in order to display them in another website or app. The oEmbed endpoints require either an App Access Token or Client Access Token. ","date":"2021-10-04","objectID":"/fuction-preview/:12:0","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"12.1 oEmbed Facebook a. oEmbed Facebook Pages Sample input of Facebook Pages {{\u003c oembed \"fb\" \"page\" \"https://www.facebook.com/FacebookforDevelopers\" \u003e}} Sample output of Facebook Pages URL Formats https://www.facebook.com/{page-name} https://www.facebook.com/{page-id} b. oEmbed Facebook Posts Sample input of Facebook Posts {{\u003c oembed \"fb\" \"post\" \"https://www.facebook.com/FacebookforDevelopers/photos/a.441861428552/10151617410093553\" \u003e}} Sample output of Facebook Posts URL Formats https://www.facebook.com/{page-name}/posts/{post-id} https://www.facebook.com/{username}/posts/{post-id} https://www.facebook.com/{username}/activity/{activity-id} https://www.facebook.com/photo.php?fbid={photo-id} https://www.facebook.com/photos/{photo-id} https://www.facebook.com/permalink.php?story_fbid={post-id}\u0026id={page-or-user-id} https://www.facebook.com/media/set?set={set-id} https://www.facebook.com/questions/{question-id} https://www.facebook.com/notes/{username}/{note-url}/{note-id} c. oEmbed Facebook Videos Sample input of Facebook Videos {{\u003c oembed \"fb\" \"video\" \"https://www.facebook.com/FacebookforDevelopers/videos/2201055573317594\" \u003e}} Sample output of Facebook Videos URL Formats https://www.facebook.com/{page-name}/videos/{video-id}/ https://www.facebook.com/{username}/videos/{video-id}/ https://www.facebook.com/video.php?id={video-id} https://www.facebook.com/video.php?v={video-id} ","date":"2021-10-04","objectID":"/fuction-preview/:12:1","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"12.2 oEmbed Instagram a. oEmbed Instagram Post Sample input of Instagram Post {{\u003c oembed \"ig\" \"p\" \"BWNjjyYFxVx\" \"hidecaption\" \u003e}} Sample output of Instagram Post b. oEmbed Instagram TV Sample input of Instagram TV {{\u003c oembed \"ig\" \"tv\" \"BkQUbR8h1sp\" \"hidecaption\" \u003e}} Sample output of Instagram TV ","date":"2021-10-04","objectID":"/fuction-preview/:12:2","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":["Web-Maintain"],"content":"12.3 oEmbed Twitter Sample input of ‘oembed tweet’ {{\u003c oembed \"tweet\" \"https://twitter.com/GoHugoIO/status/877500564405444608\" \u003e}} Sample output of ‘oembed tweet’ Hugo 0.24 Released: Big archetype update + @Netlify _redirects etc. file supporthttps://t.co/X94FmYDEZJ #gohugo #golang @spf13 @bepsays — GoHugo.io (@GoHugoIO) June 21, 2017 ","date":"2021-10-04","objectID":"/fuction-preview/:12:3","tags":[],"title":"功能预览","uri":"/fuction-preview/"},{"categories":[],"content":"特性 性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持 GoatCounter Analytics  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN  基于 lazysizes 自动转换图片为懒加载 外观和布局 / 响应式布局 / 浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 64 种社交链接  支持多达 28 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Vssue 评论系统  支持 Facebook 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 Utterances 评论系统 扩展功能  支持基于 Lunr.js 或 algolia 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightgallery.js 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $ \\KaTeX $ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 cookieconsent 的 Cookie 许可横幅 … ","date":"2021-10-02","objectID":"/about/:0:1","tags":[],"title":"关于 imisu","uri":"/about/"},{"categories":[],"content":"许可协议 imisu 根据 MIT 许可协议授权。 imisu 中用到了以下项目，感谢它们的作者： FeelIt modern-normalize Font Awesome Simple Icons Animate.css autocomplete.js Lunr.js algoliasearch lazysizes object-fit-images Twemoji lightgallery.js clipboard.js Sharer.js TypeIt $ \\KaTeX $ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine Vssue cookieconsent ","date":"2021-10-02","objectID":"/about/:0:2","tags":[],"title":"关于 imisu","uri":"/about/"},{"categories":["Web-Maintain"],"content":"摘要 这是博客网页的第一版设计. 如下是一些Bug和已修复的问题： ","date":"2021-09-30","objectID":"/beta-test/:0:0","tags":[],"title":"Beta测试","uri":"/beta-test/"},{"categories":["Web-Maintain"],"content":"增加了一些功能: 作者的头像 mapbox（我也不知道有什么用 😅） Cookies 请求页面(Bugs: ain’t appear sometimes) 页脚的版权标识 动态标题(已改为动态副标题) 增加了表情系统但还未测试。 ","date":"2021-09-30","objectID":"/beta-test/:1:0","tags":[],"title":"Beta测试","uri":"/beta-test/"},{"categories":["Web-Maintain"],"content":"Bugs: 一些内容不会显示在主页的上，如“2021年” 一些东西没有同步到Github，比如主页上的帖子是不可见的，网页发布时，“文章”页面上的标题仍然是默认的。 搜索框不知何故不可用 ","date":"2021-09-30","objectID":"/beta-test/:2:0","tags":[],"title":"Beta测试","uri":"/beta-test/"},{"categories":["Web-Maintain"],"content":"介绍 ","date":"2021-09-29","objectID":"/first-post/:0:0","tags":[],"title":"第一篇文章","uri":"/first-post/"},{"categories":["Web-Maintain"],"content":"第一次测试 😀 ","date":"2021-09-29","objectID":"/first-post/:1:0","tags":[],"title":"第一篇文章","uri":"/first-post/"}]